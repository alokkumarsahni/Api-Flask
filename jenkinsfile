pipeline {
    agent any

 

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhubid' // Replace with your Docker Hub credentials ID
        DOCKER_IMAGE = 'aloksahni/pythonapi-flask' // Replace with your Docker image name
        GIT_REPO = 'git clone https://github.com/alokkumarsahni/Api-Flask.git' // Replace with your Git repository URL
    }

 stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/alokkumarsahni/Api-Flask.git', branch: 'main'
            }
        }

 // run sonarqube test

        stage('SAST - Sonar') {
            environment {
			scannerHome = tool 'sonarscanner';
            }
            steps {
              withSonarQubeEnv(credentialsId: 'sonarid', installationName: 'sonarserver') {
                sh "${scannerHome}/bin/sonar-scanner"
              }
            }
        }

       /* stage("SQ - Quality Gates"){
            steps {
                script {
                    timeout(time: 2, unit: 'MINUTES') { // Just in case something goes wrong, pipeline will be killed after a timeout
                    //We have added timeout so if pipeline does not complete in in 2 Mins then it will fail .
                    //Ensure sonarqube webhook is configured
                    def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv , check quality gate status .
                    if (qg.status != 'OK') {
                        error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }*/
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${env.DOCKER_IMAGE}")
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhubid') {
                        docker.image("${env.DOCKER_IMAGE}").push()
                    }
                }
            }
        }
        stage('Deploy to K8s') {
      steps {
        withKubeConfig([credentialsId: 'kubeconfigid']) {
          sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"'
          sh 'chmod u+x ./kubectl'
          sh './kubectl apply -f k8smanifest.yaml'
        }
      } 
    }
    }

    post {
        always {
            cleanWs()
        }
    }
}
